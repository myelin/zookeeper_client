zookeeper

An interface to the Zookeeper distributed configuration server.

== License

Copyright 2008 Phillip Pearson, and 2010 Twitter, Inc. Licensed under the
MIT License.  See the included LICENSE file.  Portions copyright 2008-2010
the Apache Software Foundation, licensed under the Apache 2 license, and
used with permission.

== Install

sudo gem install zookeeper

== Usage

Connect to a server:

  require 'rubygems'
  require 'zookeeper'
  z = Zookeeper.new("localhost:2181")

Create, set and read nodes:

    z.create(:path => "/bacon", :data => "text to be stored in the new node")
  => {:req_id=>1, :rc=>0, :path=>"/bacon"}

    data = z.get(:path => "/bacon")
    => {:req_id=>2, :rc=>0, :data=>"text to be stored in the new node", :stat=>#<ZookeeperStat::Stat:0x000001009a5280 @exists=true, @czxid=338, @mzxid=338, @ctime=1305577245785, @mtime=1305577245785, @version=0, @cversion=0, @aversion=0, @ephemeralOwner=0, @dataLength=33, @numChildren=0, @pzxid=338>}
  
    z.set(:path => "/bacon", :text => "an entirely different line of text", data[:stat].version)

    z.set(:path => "/bacon", :text => "this won't work", data[:stat].version)
    # CZookeeper::BadVersionError: expected version does not match actual version
    => {:req_id=>17, :rc=>-103, :stat=>#<ZookeeperStat::Stat:0x000001009a4330 @exists=false>} 

    data = z.get(:path => "/bacon")

    z.delete(:path => "/bacon", :version => data[:stat].version)

Create ephemeral and sequence nodes:

    z.create(:path => "/parent", :data => "parent node")

    z.create(:path => "/parent/test-", 
             :data => "an ordered ephemeral node", 
             :ephemeral => true,
             :sequence => true)
    # => "/parent/test-0"

    z.create(:path => "/parent/test-",
           :data => "an ordered ephemeral node",
           :ephemeral => true,
           :sequence => true) 
    # => "/parent/test-1"

    z.get_children(:path => "/parent")

    => {:req_id=>31, :rc=>0, :children=>["test-0000000000", "test-0000000001"], :stat=>#<ZookeeperStat::Stat:0x00000100968c90 @exists=true, @czxid=360, @mzxid=360, @ctime=1305578801716, @mtime=1305578801716, @version=0, @cversion=2, @aversion=0, @ephemeralOwner=0, @dataLength=11, @numChildren=2, @pzxid=362>} 

== Idioms

  The following methods are initially supported:
    get
    set
    get_children
    stat
    create
    delete
    get_acl
    set_acl

  All support async callbacks.  get, get_children and stat support both
  watchers and callbacks.

  Calls take a dictionary of parameters.  With the exception of set_acl, the
  only required parameter is :path.  Each call returns a dictionary with at
  minimum two keys :req_id and :rc.

